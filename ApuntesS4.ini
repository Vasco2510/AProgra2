Durante esta semana y hasta la 6 abordaremos los Punteros

Basico de punteros:
* : Crea el puntero. Lo diferencia de una variable.
& : Obtiene una direccion de memoria, y la trae no como copia, sino como un DNI real. No es la persona, pero si la misma información
                                                                                        que afecta a aesa persona.
        Por tanto, al crear un puntero , se le pude asignar una direccion de memoria.

* : Permite acceder al valor delante de la dirrecion de memoria.
&: 
    Observacion: & permite declarar referencia al la direccion de memoria.
        ¿Que es una referencia? 
            - Es un apodo que se le da a otra variable, para hacerla MAS FACIL DE MANEJAR.
            - Ejemplo: 
                int var =5;
                int& foo = var;// aqui, "var" no puede entregar su valor, sino solo dureccion de memo
                        //entonces foo guarda la direccion de memoria. 
                        // SI a esa direccion de memoria, le cambio el valor que guarda (usando a foo), entonces var tambien deja de almacenar 5 y toma lo nuevo.
                foo =12;
Punteros en funciones:
    Recuerda que siempre se definen como: 
    int* puntero = &JalaDireccion;

    Entonces aplicarás lo mismo a las funciones. 
    en la definicion de la funcion, usas int* puntero, 
    Y donde llamas a la funcion (en el main en general), asignas al puntero, una direccion de memoria con &JalaDireccion;
            entonces cout<<Var; imprimirá 12

Pregunta: ¿Por qué se usan paréntesis en (*ptosAzul)++?

                    void actualizaPuntosAzul(int *ptosAzul)
                    {
                        (*ptosAzul)++; 
                    }

    Respuesta:
    Los paréntesis son necesarios para asegurarse de que el ++ incremente el valor al que apunta ptosAzul y no el puntero mismo.}
    Sin los paréntesis, ptosAzul++ movería el puntero a la siguiente posición de memoria, en lugar de sumar 1 al valor.

Uso innecesario de paso por referencia al argumento de una funcion:}

    int factorial(int& numero) { // sin referencia
        int result = 1;
        for (int i = 1; i <= numero; ++i) {
            result *= i;
        }
        return result;
    }
            Respuesta: ¿porque es innecesario? Lo es xq no se intentó modificar la variable numero. 
                                El mismo resultado se  obtiene si se le pasa a la funcion, la variable numero, como tal sin referencia.


Terminos especiales cuando se trabaja con punteros y funciones:
    - pase por valor: (Es darle a la función, un valor directamente)
    - Pase por referencia: (es pasar (mostrar y hacerlo editable) el valor de una variable utilizando el operador referencia &)
    - Desferefernciar : 

AHora un caso interesante
Punteros Nulos
    Un nullptr no apunta a ningún objeto. 
    int* pi = nullptr; // es equivalente a int *pi=0;
    int* p2 = 0;      

¿cuanto espacio ocupa un puntero? en Clion utiliza 8 bytes

Booleanos con punteros:
    Un puntero que almacena valor = 0, entonces, es entendido como FALSE, en una condicional
    Un puntero que almacena valor !=0, lo lee como TRUE, cualquier condicional.

Más sobre punteros
    int ival = 1024;
    int *pi =0;        
    // pi es válido,  pi tiene asignado nullptr;
    int *pi2 = &ival;  // pi2  es un puntero válido, tiene la dirección de ival
    if(pi)  // pi tiene el valor 0, entonces si se evalúa la condición es falsa
    if(pi2) // pi2 es un puntero a ival, entonces no vale cero, si se evalúa la condición 
    es verdadera

Referencia a punteros: 

    int  ival = 1024;
    int& refVal = ival;  // refVal refers to ival  (es otro nombre de ival)
    refVal = 2;    // asigna 2 al objeto al que se refiere refVal, // es decir ival = 2
    int &refVal2;     // error: una referencia debe // ser inicializada


Referencia a Punteros:
 Una referencia no es un objeto. Por lo tanto no puede haber un puntero a una 
referencia. Sin embargo, como un puntero es un objeto, se puede definir una 
referencia a un puntero.




Dentista debe tener: 
- Caries marker (Voco) (o su traduccion). Para marcar la dentina que deberia sr removida.