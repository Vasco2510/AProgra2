APUNTES GENERALES SEMANA 2 - P2

Estructura for-each: 

    for (char& car : text) 
    //Esta es una forma de recorrer cada carácter de la cadena text utilizando una estructura for-each de C++.
    // El bucle for-each se ejecutará una vez por cada carácter en text.
    //La estructura for-each en C++ es una forma de recorrer los elementos de un contenedor, como un array o una cadena de caracteres, de manera más sencilla y legible.
    //La sintaxis general es: for (tipo_elemento& elemento : contenedor) { ... }.
    // la estructura for-each de C++ asume que el contenedor que estás iterando tiene elementos del mismo tipo



Caracter NULO vs Caracter blanck
if (previo == '\0' || isblank(previo))
    // Esta condición verifica si el carácter anterior (previo) es el carácter nulo ('\0') o es un espacio en blanco (isblank(previo)).
    // Si se cumple esta condición, significa que el carácter actual car es la primera letra de una palabra.
    // El carácter nulo ('\0'). Indica el final de una cadena.
    // Tiene el valor numérico 0 y no es visible cuando se imprime.
    // Un espacio en blanco, por otro lado, es un carácter visible que representa un espacio entre palabras. Su valor numérico es 32 (en ASCII).

El operador "?" como un if else más SIMPLE y RAPIDO
    El operador ?: en C++ se conoce como el operador ternario o condicional.
    Su función es proporcionar una forma más concisa de escribir una declaración if-else simple.
    condición ? valor_si_verdadero : valor_si_falso

Uso de comillas simples '' y comillas dobles ""
    Las comillas simples se usan para caracteres individuales, mientras que las comillas dobles se usan para cadenas de texto (strings).

¿cuando inicializar una variable y asignarle un valor? 
    En caso tu variable sea cualquier tipo de númerica, es recomendable asignarle su valor inicial o por defecto.
    En caso no hacerlo, c++ le dará un valor inicial pseudo aleatorio.

¿por que usar if dentro de un else?
    POr que es una manera de VALIDAR y controlar que se cumpla necesariamente la otra condicion que queda. 
    Evita que algun payaso ingrese otra cosa fuera de las opciones validas de ingreso.
¿Como manejar las llaves en varias lineas? 
    Es conveniente ponerlas no en la misma fila de la condicion que alojan, sino en filas independientes.
    
Punteros en C++:
    * : Operador de indirecion o desreferencia. Permite acceder al valor.
            Ejem: *ptr2, obtiene el valor apuntado por ptr2. 
    & : Operador de direccion (alt +38)&; sirve para consultar lo que se almacena la direccion de memoria asignada, en tiempo real.
        - permite obteneer la direccion de memoria de una variable.
        - Utilidad: Modificar una variable externa a una función, desde dentro de la función, y conservar los cambios al salir de la función.
        (pendiente incluir ejemplo)

Frases clave para interpretar:
    - Una referencia al tercer puntero que apunta al cuarto entero
        Como se ve: int ptr3=4; int* ptr4 = &ptr3


Algunas bibliotecas C++:
 - Conio.h : ¿para que sirve? 

Funcion o comando getch():
 - Permite pausar la ejecucion de un programa c++ (¿y recibir una tecla o accion?)

Llenar arrays de 2 dimensiones: 
    ATENTO que hay un pequeño error, y es que un aray se empieza a llenar desde 0 y no desde 1
- double vertices[nVertices][2];
    double perimetro = 0.0;
    
    for (int i=1; i<=nVertices; i++)
    {
        // llenamos el array
        cout<<"Ingrese las coordenadas del vertice "<<i<<endl;
        cin>>vertices[i][0]>>vertices[i][1];  

    }
// Tecnica para volver a obtener 0, luego de haber hecho un conteo.
int siguiente = (i+1) % nVertices; 


Propiedad de los primos: 
    Si un número no es primo, tiene al menos un factor que es menor o igual a la raíz cuadrada del número.


FUNCION LAMBDA: 
    Son muy convenientes para programadores modernos :
Utilidad de la Función Lambda en C++
    Las funciones lambda en C++ son útiles por varias razones:

Concisión:

    Permiten definir funciones pequeñas y simples directamente en el lugar donde se necesitan, sin tener que declarar una función separada.
    Captura de Variables:

    Las lambdas pueden capturar variables del entorno en el que se definen, lo que permite acceder a estas variables sin necesidad de pasarlas explícitamente como parámetros.
    Funciones de Orden Superior:

    Las lambdas son útiles en contextos donde se necesitan funciones de orden superior, como al pasar funciones a algoritmos estándar (std::sort, std::for_each, etc.).
Flexibilidad:

    Permiten escribir código más flexible y modular, facilitando la creación de funciones que pueden ser reutilizadas en diferentes contextos.
Manejo de Callbacks y Eventos:

    Son muy útiles para definir callbacks y manejadores de eventos de manera concisa, especialmente en programación de interfaces gráficas y en sistemas asíncronos.

Estructura de funcion lambda: 
[ captures ] ( parameters ) -> return_type { body }

captures: Especifica qué variables del entorno pueden ser utilizadas dentro de la lambda.
parameters: Lista de parámetros de la función.
return_type: (Opcional) Tipo de retorno de la función.
body: Código que define lo que hace la función.


begin() y end()
Estos son métodos miembros de contenedores como std::vector que retornan iteradores:

begin(): Retorna un iterador al primer elemento del contenedor.
end(): Retorna un iterador al elemento siguiente al último del contenedor.


Manejo de numeros grandes: 
 Tipos de Datos y Capacidad
En C++, los diferentes tipos de datos pueden almacenar números de tamaños distintos. Aquí hay algunos tipos de datos y sus capacidades aproximadas:

*int*: Puede almacenar números desde -2,147,483,648 hasta 2,147,483,647.
long: Puede almacenar números más grandes que int, pero varía según la implementación.
long long: Puede almacenar números desde -9,223,372,036,854,775,808 hasta 9,223,372,036,854,775,807.
unsigned long long: Solo almacena números positivos, desde 0 hasta 18,446,744,073,709,551,615.

¿Como llamar a un array luego de haberlo creado?
-     // Generar una secuencia de 10 números aleatorios
    int aleatorios[10];
    genera10Aleato(aleatorios);


Manejo de numeros grandes: 
    - Utiliza long long int o unsigned long long int para manejar números enteros grandes
    - **Long double** es usualmente el mejor para calculos matematicos y funciones que calculas. 
                        Sirve para manejar números reales grandes con decimales. 


Inicializacion y declaracion de array: 
    - Sus elementos van dentro de llaves